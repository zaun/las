---
AWSTemplateFormatVersion: '2010-09-09'
Description: Website Setup
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of an Amazon Route 53 hosted zone e.g. server.com
    MinLength: 3
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.
  IncludeAPIBackend: 
    Type: String
    Description: Create API recourses for a backend
    Default: 'Yes'
    AllowedValues: 
      - 'Yes'
      - 'No'
  IncludeCognito: 
    Type: String
    Description: Create Cognito resources for authentication
    Default: 'Yes'
    AllowedValues: 
      - 'Yes'
      - 'No'
  DNSIsLive: 
    Type: String
    Description: Change this to yes once the DNS server is live
    Default: 'No'
    AllowedValues: 
      - 'Yes'
      - 'No'
  MapID:
    Type: String
    Description: A 10-character key identifier (Map ID)
  MapTeam:
    Type: String
    Description: This key's value is your 10-character Team ID
  MapKey:
    Type: String
    NoEcho: true
    Description: Base64 of your private key file

Conditions: 
  CreateCognitoResources: !Equals [ !Ref IncludeCognito, 'Yes' ]
  CreateAPIResources: !Equals [ !Ref IncludeAPIBackend, 'Yes' ]
  CreateAPIDomain: !And [!Equals [ !Ref DNSIsLive, 'Yes' ], !Equals [ !Ref IncludeAPIBackend, 'Yes' ]]

Mappings:
  S3RegionMap:
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
      S3WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
      S3WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
      S3WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
      S3WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
      S3WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
      S3WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
      S3WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
    sa-east-1:
      S3HostedZoneId: Z31GFT0UA1I2HV
      S3WebsiteEndpoint: s3-website-sa-east-1.amazonaws.com

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: execution
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            Resource: '*'
          - Effect: Allow
            Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'

  APIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: execution
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
 
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  ACMApproverRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "ACMCFNLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "acm:*"
                  - "route53:*"
                Resource: "*"

  # This is a function used internally by this cloudformation
  # to create a SSL Certificate and auto-validate it with Route53
  ACMApproverFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import sys,os,json,datetime,boto3,traceback,time,hashlib
          from botocore.vendored import requests
          from datetime import date, datetime
          def json_serial(obj):
              if isinstance(obj, (datetime, date)):
                  return obj.isoformat()
              raise TypeError ("Type %s not serializable" % type(obj))
          def cfn_response(url, body):
              headers = {'content-type' : '','content-length' : str(len(body))}
              response = requests.put(url,data=body,headers=headers)
          def acm_certificate(event, context):
              print "Got %s" % json.dumps(event, default=json_serial)
              if event['RequestType'] in ['Create','Update']:
                  cfn_response(event['ResponseURL'], _create_acm_certificate(event))
              else:
                  cfn_response(event['ResponseURL'], _delete_acm_certificate(event))
          def _create_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              rp = event['ResourceProperties']
              try:
                  dn1 = rp['DomainSuffix'].rstrip('.')
                  dn2 = "%s.%s" % ('*', dn1)
                  if len(dn2) > 62:
                      hashlen = 62-len(dn1)
                      ch = hashlib.sha256(dn2).hexdigest()[-hashlen:]
                      dn2 = "%s.%s" % (ch, dn1)
                  response = acm.list_certificates(
                      CertificateStatuses=['PENDING_VALIDATION','ISSUED']
                  )
                  cert_arn = None
                  for cert in response['CertificateSummaryList']:
                      print "existing cert: %s" % cert['DomainName']
                      if cert['DomainName'] == dn1:
                          cert_arn = cert['CertificateArn']

                  if not cert_arn:
                      response = acm.request_certificate(
                          DomainName=dn1,
                          ValidationMethod='DNS',
                          IdempotencyToken=event['LogicalResourceId'],
                          SubjectAlternativeNames=[dn2]
                      )
                      cert_arn = response['CertificateArn']
                      time.sleep(20)

                  response = acm.describe_certificate(
                      CertificateArn=cert_arn
                  )
                  r53_c = []
                  rr = response['Certificate']['DomainValidationOptions'][0]['ResourceRecord']
                  r53_c.append({'Action':'UPSERT','ResourceRecordSet':{'Name': rr['Name'],'Type': rr['Type'],'TTL': 300,'ResourceRecords': [{'Value': rr['Value']}]}})

                  r53 = boto3.client('route53')
                  response = r53.change_resource_record_sets(
                      HostedZoneId=rp['HostedZoneId'],
                      ChangeBatch={'Comment':'Auth','Changes':r53_c}
                  )
                  time.sleep(10)

                  ret['PhysicalResourceId'] = cert_arn
                  ret['Data'] = {}
                  ret['Data']['CertificateArn'] = cert_arn
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'FAILED'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))
              return json.dumps(ret)

          def _delete_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              ret['PhysicalResourceId'] = event['PhysicalResourceId']
              try:
                  response = acm.delete_certificate(
                      CertificateArn=event['PhysicalResourceId']
                  )
                  print "got response %s" % json.dumps(response, default=json_serial)
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'SUCCESS'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))

              return json.dumps(ret)

      Description: Cloudformation Custom Resource for ACM certs using Route53 approval
      Handler: index.acm_certificate
      MemorySize: 256
      Runtime: python2.7
      Timeout: 300
      Role:
        Fn::GetAtt: ACMApproverRole.Arn

  LambdaFunctionAPI:
    Type: AWS::Lambda::Function
    Condition: CreateAPIResources
    Properties:
      Description: API Backend
      Code:
        ZipFile: 'exports.handler = function (event, context, callback) { callback(null, { statusCode: 200, headers: { "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key", "Access-Control-Allow-Origin": "*", "Access-Control-Allow-Methods": "*" }, body: JSON.stringify(event) }); };'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          kid: !Ref MapID
          iss: !Ref MapTeam
          key: !Ref MapKey
 
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Condition: CreateAPIResources
    Properties:              
      FailOnWarnings: true
      Name: !Join ['-', !Split ['.', !Join ['.', ['api', !Ref DomainName]]]]
      Body:
        swagger: '2.0'
        info:
          version: 0.0.1
          title: !Join [' ', ['API route for', !Ref DomainName]]
        basePath: '/api'
        paths:
          '/{proxy+}':
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
            x-amazon-apigateway-any-method:
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-swagger-router-controller: main
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionAPI.Arn}/invocations"
                credentials: !GetAtt APIGatewayExecutionRole.Arn

        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Condition: CreateAPIResources
    Properties:
      RestApiId: !Ref APIGateway
      Description: Deploy for live
      StageName: Live
 
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      Tags:
      - Key: Name
        Value: !Join ['_', ['WebsiteBucket', !Ref 'AWS::StackName']]
      - Key: Domain
        Value: !Ref DomainName
    DeletionPolicy: Retain
 
  WWWBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['.', ['www', !Ref DomainName]]
      AccessControl: PublicRead
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref WebsiteBucket
      Tags:
      - Key: Name
        Value: !Join ['_', ['WWWBucket', !Ref 'AWS::StackName']]
      - Key: Domain
        Value: !Ref DomainName

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
          Principal: '*'

  WWWBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WWWBucket
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource: !Join ['', ['arn:aws:s3:::', !Ref WWWBucket, '/*']]
          Principal: '*'
 
  DNS:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Join [' ', ['Hosted zone for', !Ref DomainName]]
      Name: !Ref DomainName
      HostedZoneTags:
      - Key: Application
        Value: Blog
 
  Certificate:
    Type: 'Custom::ACMCertificate'
    Version: '1.0'
    DependsOn:
      - 'DNS'
      - 'ACMApproverFunction'
    Properties:
      ServiceToken: !GetAtt ACMApproverFunction.Arn
      DomainSuffix: !Ref DomainName
      HostedZoneId: !Ref DNS

  APIDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: CreateAPIDomain
    Properties: 
      RegionalCertificateArn: !GetAtt Certificate.CertificateArn
      DomainName: !Join ['.', ['api', !Ref DomainName]]
      EndpointConfiguration: 
        Types:
          - 'REGIONAL'

  APIDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: CreateAPIDomain
    Properties:
      DomainName: !Join ['.', ['api', !Ref DomainName]]
      RestApiId: !Ref APIGateway
      Stage: 'Live'

  APIDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - DNS
      - APIDomainMapping
    Condition: CreateAPIDomain
    Properties:
      HostedZoneName:
        Fn::Join: ['', [!Ref DomainName, '.']]
      Comment: API Zone record.
      RecordSets:
      - Name: !Join ['.', ['api', !Ref DomainName]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt APIDomain.RegionalHostedZoneId
          DNSName: !GetAtt APIDomain.RegionalDomainName

  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: DNS
    Properties:
      HostedZoneName:
        Fn::Join: ['', [!Ref DomainName, '.']]
      Comment: Zone records.
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          HostedZoneId: !FindInMap [S3RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
          DNSName: !FindInMap [S3RegionMap, !Ref 'AWS::Region', S3WebsiteEndpoint]
      - Name: !Join ['.', ['www', !Ref DomainName]]
        Type: A
        AliasTarget:
          HostedZoneId: !FindInMap [S3RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
          DNSName: !FindInMap [S3RegionMap, !Ref 'AWS::Region', S3WebsiteEndpoint]
 
  UserPool:
    Type: AWS::Cognito::UserPool
    Condition: CreateCognitoResources
    Properties:
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: false
      EmailConfiguration: 
        ReplyToEmailAddress: 'nobody@notreal.com'
      MfaConfiguration: 'OFF'
      AutoVerifiedAttributes:
        - email
      Policies: 
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes: 
        - email
      UserPoolName: !Ref DomainName
 
  PoolClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: CreateCognitoResources
    Properties:
      ClientName: 'Website'
      ExplicitAuthFlows: 
        - 'USER_PASSWORD_AUTH'
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Condition: CreateCognitoResources
    Properties:
      IdentityPoolName: !Join ['', !Split ['.', !Ref DomainName]]
      AllowUnauthenticatedIdentities: false
      DeveloperProviderName: !Ref DomainName
      CognitoIdentityProviders: 
        - ClientId: !Ref PoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Condition: CreateCognitoResources
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
  WebsiteURL:
    Value: !Join ['.', ['http://www', !Ref DomainName]]
    Description: Website URL
  APIURL:
    Condition: CreateAPIResources
    Value: !Join ['.', ['api', !Ref DomainName]]
    Description: Website URL
  S3URL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Description: URL for website hosted on S3
  CognitoPool:
    Condition: CreateCognitoResources
    Value: !Ref UserPool
    Description: Cognito Pool ID
  CognitoClient:
    Condition: CreateCognitoResources
    Value: !Ref PoolClient
    Description: Cognito Client ID
  CognitoIdentity:
    Condition: CreateCognitoResources
    Value: !Ref IdentityPool
    Description: Cognito Identity Pool ID